{"version":3,"sources":["components/Header/Header.jsx","components/Statistics/Statistics.jsx","components/ResultsView/ResultsView.jsx","components/GameStatus/GameStatus.jsx","utils/bullsCowsCounter.js","components/FormAlert/FormAlert.jsx","containers/UserInput/UserInput.jsx","components/Rules/Rules.jsx","components/MainView/MainView.jsx","utils/randomizer.js","utils/checker.js","containers/App/App.jsx","index.js"],"names":["Header","initGame","guess","Jumbotron","Button","variant","onClick","length","Statistics","bulls","cows","rounds","attempts","className","Container","map","el","i","key","attempt","ResultsView","showModal","checkWinner","Modal","show","size","aria-labelledby","centered","Title","id","Body","Footer","GameStatus","gameStatus","resultsCounter","user","pc","results","forEach","num","indexOf","FormError","inputValid","Alert","UserInput","props","handleChange","e","value","target","setState","validateInput","handleSubmit","guessNumber","checkAttempt","state","bullsCowsCounter","preventDefault","match","this","Form","onSubmit","Group","controlId","Label","Control","type","placeholder","isInvalid","isValid","onChange","required","disabled","Component","Rules","ListGroup","as","Item","MainView","Accordion","defaultActiveKey","Card","Toggle","eventKey","Collapse","randomizer","arr","item","Math","floor","random","push","console","log","checker","App","a","isWin","postLog","fetch","method","headers","body","JSON","stringify","then","d","json","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.10e502ce.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Jumbotron, Button } from \"react-bootstrap\";\r\n\r\nexport default function Header({ initGame, guess }) {\r\n  return (\r\n    <Jumbotron>\r\n      <h1>Быки и Коровы</h1>\r\n      <h6>Добро пожаловать в игру \"Быки и Коровы\"!</h6>\r\n      <p>\r\n        Чтобы начать игру, жми кнопку ниже! Если не знаком с правилами, внизу\r\n        все написано, разворачивай \"Правила игры\" и читай!.\r\n      </p>\r\n      <p>\r\n        <Button variant=\"success\" onClick={initGame}>\r\n          Начать игру!\r\n        </Button>\r\n      </p>\r\n      {guess.length > 0 && <strong>Компьютер загадал число!</strong>}\r\n    </Jumbotron>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Jumbotron, Container } from \"react-bootstrap\";\r\n\r\nexport default function Statistics({ bulls, cows, rounds, attempts }) {\r\n  return (\r\n    <Jumbotron className=\"d-flex\">\r\n      <Container>\r\n        <h5>Текущий ход</h5>\r\n        <p>{`Быки - ${bulls}`}</p>\r\n        <p>{`Коровы - ${cows}`}</p>\r\n        <p>{`Осталось раундов - ${rounds}`}</p>\r\n      </Container>\r\n      <Container>\r\n        <h5>История ходов</h5>\r\n        <Container>\r\n          {attempts.length > 0 &&\r\n            attempts.map((el, i) => (\r\n              <p key={i}>\r\n                {i + 1} попытка:&nbsp;\r\n                <strong>{el.attempt}</strong>&nbsp; Б - <span>{el.bulls}</span>\r\n                &nbsp;К - <span>{el.cows}</span>\r\n              </p>\r\n            ))}\r\n        </Container>\r\n      </Container>\r\n    </Jumbotron>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport { Modal, Button } from \"react-bootstrap\";\r\n\r\nexport default function ResultsView({\r\n  initGame,\r\n  showModal,\r\n  checkWinner,\r\n  guess,\r\n}) {\r\n  return (\r\n    <Modal\r\n      show={showModal}\r\n      size=\"lg\"\r\n      aria-labelledby=\"contained-modal-title-vcenter\"\r\n      centered\r\n    >\r\n      <Modal.Header>\r\n        <Modal.Title id=\"contained-modal-title-vcenter\">Результат</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <h4>{checkWinner ? \"Поздравляю! Ты победил!\" : \"Увы, ты проиграл!\"}</h4>\r\n        <p>\r\n          Загаданное число:&nbsp;<strong>{guess}</strong>\r\n        </p>\r\n        <p>Давай начнем сначала?</p>\r\n      </Modal.Body>\r\n      <Modal.Footer>\r\n        <Button variant=\"success\" onClick={initGame}>\r\n          Начать игру!\r\n        </Button>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Statistics from \"../Statistics\";\r\nimport ResultsView from \"../ResultsView\";\r\n\r\nexport default function GameStatus({\r\n  attempts,\r\n  gameStatus,\r\n  rounds,\r\n  bulls,\r\n  cows,\r\n  initGame,\r\n  showModal,\r\n  guess,\r\n}) {\r\n  if (gameStatus && rounds > 0) {\r\n    return (\r\n      <Statistics\r\n        bulls={bulls}\r\n        cows={cows}\r\n        rounds={rounds}\r\n        attempts={attempts}\r\n      />\r\n    );\r\n  } else {\r\n    return (\r\n      <ResultsView\r\n        initGame={initGame}\r\n        guess={guess}\r\n        showModal={showModal}\r\n        checkWinner={rounds > 0 ? true : false}\r\n      />\r\n    );\r\n  }\r\n}\r\n","function resultsCounter(user, pc) {\r\n  const results = {\r\n    bulls: 0,\r\n    cows: 0,\r\n  };\r\n\r\n  const attempt = [...user];\r\n\r\n  attempt.forEach((num, i) => {\r\n    if (+num === pc[i]) {\r\n      results.bulls++;\r\n    } else if (pc.indexOf(+num) >= 0) {\r\n      results.cows++;\r\n    }\r\n  });\r\n  return results;\r\n}\r\n\r\nexport default resultsCounter;\r\n","import React from \"react\";\r\n\r\nimport { Alert } from \"react-bootstrap\";\r\nexport default function FormError({ inputValid }) {\r\n  if (!inputValid) {\r\n    return (\r\n      <Alert variant=\"danger\">\r\n        Внимание! Нужно ввести <strong>четырёхзначное число</strong>! Будьте\r\n        внимательней!\r\n      </Alert>\r\n    );\r\n  } else {\r\n    return (\r\n      <Alert variant=\"info\">Хм... Интересный вариант! Жми \"Угадать\"!</Alert>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport bullsCowsCounter from \"../../utils/bullsCowsCounter\";\r\nimport { Form, Button } from \"react-bootstrap\";\r\nimport FormError from \"../../components/FormAlert\";\r\n\r\nclass UserInput extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      value: \"\",\r\n      inputValid: false,\r\n    };\r\n  }\r\n\r\n  handleChange = (e) => {\r\n    const value = e.target.value;\r\n    this.setState({ value: value }, () => {\r\n      this.validateInput(value);\r\n    });\r\n  };\r\n\r\n  handleSubmit = (e) => {\r\n    const { guessNumber, checkAttempt } = this.props;\r\n    const { value } = this.state;\r\n    const { bulls, cows } = bullsCowsCounter(value, guessNumber);\r\n\r\n    checkAttempt(bulls, cows, value);\r\n\r\n    this.setState({ value: \"\", inputValid: false });\r\n\r\n    e.preventDefault();\r\n  };\r\n\r\n  validateInput = (value) => {\r\n    let inputValid = this.state.inputValid;\r\n\r\n    inputValid = value.match(/\\b\\d{4}\\b/);\r\n\r\n    this.setState({ inputValid: inputValid });\r\n  };\r\n\r\n  render() {\r\n    const { value, inputValid } = this.state;\r\n    const { guessNumber } = this.props;\r\n    if (guessNumber.length > 0) {\r\n      return (\r\n        <Form onSubmit={this.handleSubmit}>\r\n          <Form.Group controlId=\"userNumber\">\r\n            <Form.Label>\r\n              <FormError inputValid={inputValid} />\r\n            </Form.Label>\r\n            <Form.Control\r\n              type=\"number\"\r\n              size=\"sm\"\r\n              placeholder=\"Твой вариант?..\"\r\n              isInvalid={!inputValid}\r\n              isValid={inputValid}\r\n              value={value}\r\n              onChange={this.handleChange}\r\n              required\r\n            />\r\n          </Form.Group>\r\n          <Button disabled={!inputValid} variant=\"primary\" type=\"submit\">\r\n            Угадать\r\n          </Button>\r\n        </Form>\r\n      );\r\n    } else {\r\n      return (\r\n        <p>Чтобы увидеть поле ввода и начать угадывать, нажми \"Начать игру\"!</p>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default UserInput;\r\n","import React from \"react\";\r\nimport { ListGroup } from \"react-bootstrap\";\r\n\r\nexport default function Rules() {\r\n  return (\r\n    <ListGroup variant=\"flush\" as=\"ul\">\r\n      <ListGroup.Item as=\"li\">Компьютер загадывает любое четырёхзначное число.</ListGroup.Item>\r\n      <ListGroup.Item as=\"li\">Вы вводите свой вариант.</ListGroup.Item>\r\n      <ListGroup.Item as=\"li\">Если цифра совпала, но стоит не на своем месте - это корова.</ListGroup.Item>\r\n      <ListGroup.Item as=\"li\">Если цифра совпала и стоит на своем месте - это бык.</ListGroup.Item>\r\n      <ListGroup.Item as=\"li\">Нужно угадать число с 5 попыток.</ListGroup.Item>\r\n    </ListGroup>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport UserInput from \"../../containers/UserInput\";\r\nimport Rules from \"../Rules\";\r\n\r\nimport { Button, Card, Accordion } from \"react-bootstrap\";\r\n\r\nexport default function MainView({ guess, checkAttempt }) {\r\n  return (\r\n    <Accordion defaultActiveKey=\"0\">\r\n      <Card>\r\n        <Card.Header>\r\n          <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"1\">\r\n            Правила игры\r\n          </Accordion.Toggle>\r\n        </Card.Header>\r\n        <Accordion.Collapse eventKey=\"1\">\r\n          <Card.Body>\r\n            <Rules />\r\n          </Card.Body>\r\n        </Accordion.Collapse>\r\n      </Card>\r\n      <Card>\r\n        <Card.Header>\r\n          <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"0\">\r\n            Поле ввода\r\n          </Accordion.Toggle>\r\n        </Card.Header>\r\n        <Accordion.Collapse eventKey=\"0\">\r\n          <Card.Body>\r\n            <UserInput guessNumber={guess} checkAttempt={checkAttempt} />\r\n          </Card.Body>\r\n        </Accordion.Collapse>\r\n      </Card>\r\n    </Accordion>\r\n  );\r\n}\r\n","function randomizer() {\r\n  const arr = [];\r\n  while (arr.length < 4) {\r\n    const item = Math.floor(Math.random() * 10);\r\n    if (arr.indexOf(item) < 0) arr.push(item);\r\n  }\r\n  console.log(`The guessing number: ${arr}`);\r\n  return arr;\r\n}\r\n\r\nexport default randomizer;\r\n","function checker(bulls, rounds) {\r\n  return bulls === 4 && rounds > 0 ? false : true;\r\n}\r\n\r\nexport default checker;\r\n","import React, { Component } from \"react\";\r\n\r\nimport Header from \"../../components/Header\";\r\nimport GameStatus from \"../../components/GameStatus\";\r\nimport MainView from \"../../components/MainView\";\r\n\r\nimport randomizer from \"../../utils/randomizer\";\r\nimport checker from \"../../utils/checker\";\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      guess: [],\r\n      attempts: [],\r\n      bulls: 0,\r\n      cows: 0,\r\n      rounds: 10,\r\n      gameStatus: true,\r\n    };\r\n  }\r\n\r\n  initGame = () => {\r\n    const guessNumber = randomizer();\r\n\r\n    this.setState({\r\n      guess: guessNumber,\r\n      attempts: [],\r\n      bulls: 0,\r\n      cows: 0,\r\n      rounds: 10,\r\n      gameStatus: true,\r\n    });\r\n  };\r\n\r\n  checkAttempt = async (bulls, cows, value) => {\r\n    const { rounds, attempts } = this.state;\r\n    const isWin = checker(bulls, rounds);\r\n\r\n    await this.setState((state) => {\r\n      return {\r\n        gameStatus: isWin,\r\n        attempts: [...attempts, { attempt: value, bulls: bulls, cows: cows }],\r\n        bulls: bulls,\r\n        cows: cows,\r\n        rounds: state.rounds - 1,\r\n      };\r\n    });\r\n\r\n    if (!isWin || rounds === 1) {\r\n      this.postLog();\r\n    }\r\n  };\r\n\r\n  postLog = () => {\r\n    const { guess, attempts, rounds, gameStatus } = this.state;\r\n\r\n    return fetch(\"/logs\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({ guess, attempts, rounds, gameStatus }),\r\n    }).then((d) => d.json());\r\n  };\r\n\r\n  render() {\r\n    const { guess, attempts, bulls, cows, gameStatus, rounds } = this.state;\r\n\r\n    return (\r\n      <div className=\"container\">\r\n        <Header initGame={this.initGame} guess={guess} />\r\n        <GameStatus\r\n          guess={guess}\r\n          attempts={attempts}\r\n          bulls={bulls}\r\n          cows={cows}\r\n          gameStatus={gameStatus}\r\n          rounds={rounds}\r\n          initGame={this.initGame}\r\n          showModal={!gameStatus || rounds === 0 ? true : false}\r\n        />\r\n        <MainView guess={guess} checkAttempt={this.checkAttempt} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport App from \"./containers/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}